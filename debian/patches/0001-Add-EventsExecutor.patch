From: Timon Engelke <timon.engelke@online.de>
Date: Thu, 9 Jun 2022 00:41:57 +0200
Subject: Add EventsExecutor

---
 include/rcl/timer.h | 27 +++++++++++++++++++++++++++
 src/rcl/timer.c     | 10 ++++++++++
 2 files changed, 37 insertions(+)

diff --git a/include/rcl/timer.h b/include/rcl/timer.h
index ec08acf..1432324 100644
--- a/include/rcl/timer.h
+++ b/include/rcl/timer.h
@@ -325,6 +325,33 @@ RCL_WARN_UNUSED
 rcl_ret_t
 rcl_timer_get_time_until_next_call(const rcl_timer_t * timer, int64_t * time_until_next_call);
 
+/// Retrieve the time point value for the next timer call.
+/**
+ * This function will populate the data of the time_point_value object with the
+ * value corresponding to when the next timer call should happen.
+ *
+ * The `time_point_value` argument must point to an allocated rcl_time_point_value_t, as
+ * the time point is copied into that instance.
+ *
+ * <hr>
+ * Attribute          | Adherence
+ * ------------------ | -------------
+ * Allocates Memory   | No
+ * Thread-Safe        | Yes
+ * Uses Atomics       | Yes
+ * Lock-Free          | Yes [1]
+ * <i>[1] if `atomic_is_lock_free()` returns true for `atomic_int_least64_t`</i>
+ *
+ * \param[in] timer the handle to the timer that is being queried
+ * \param[out] time_point_value the output variable for the result
+ * \return #RCL_RET_OK if the timer until next call was successfully calculated, or
+ * \return #RCL_RET_INVALID_ARGUMENT if any arguments are invalid, or
+ */
+RCL_PUBLIC
+RCL_WARN_UNUSED
+rcl_ret_t
+rcl_timer_get_next_call_time(const rcl_timer_t * timer, rcl_time_point_value_t * time_point_value);
+
 /// Retrieve the time since the previous call to rcl_timer_call() occurred.
 /**
  * This function calculates the time since the last call and copies it into
diff --git a/src/rcl/timer.c b/src/rcl/timer.c
index 77239fb..98da2d0 100644
--- a/src/rcl/timer.c
+++ b/src/rcl/timer.c
@@ -328,6 +328,16 @@ rcl_timer_get_time_until_next_call(const rcl_timer_t * timer, int64_t * time_unt
   return RCL_RET_OK;
 }
 
+rcl_ret_t
+rcl_timer_get_next_call_time(const rcl_timer_t * timer, rcl_time_point_value_t * time_point_value)
+{
+  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
+  RCL_CHECK_ARGUMENT_FOR_NULL(time_point_value, RCL_RET_INVALID_ARGUMENT);
+
+  *time_point_value = rcutils_atomic_load_int64_t(&timer->impl->next_call_time);
+  return RCL_RET_OK;
+}
+
 rcl_ret_t
 rcl_timer_get_time_since_last_call(
   const rcl_timer_t * timer,
